import { snippetCompletion } from "@codemirror/autocomplete";

export const autoCompleteList = new /* FOR AUTOGEN */ Array(
	snippetCompletion( "abs{}" , { label:"abs" } ), 
	snippetCompletion( "alpha" , { label:"alpha" } ), 
	snippetCompletion( "bar{#{var}}" , { label:"bar" } ), 
	snippetCompletion( ":'" , { label:"because" } ), 
	snippetCompletion( "beta" , { label:"beta" } ), 
	snippetCompletion( "cancel{#{expression}}" , { label:"cancel" } ), 
	snippetCompletion( "ceil{#{expression}}" , { label:"ceil" } ), 
	snippetCompletion( "chi" , { label:"chi" } ), 
	snippetCompletion( "CC" , { label:"complexnumberset" } ), 
	snippetCompletion( "delta" , { label:"delta" } ), 
	snippetCompletion( "Delta" , { label:"Delta" } ), 
	snippetCompletion( "dot{#{var}}" , { label:"dot" } ), 
	snippetCompletion( "ddot{#{var}}" , { label:"doubledot" } ), 
	snippetCompletion( "O/" , { label:"emptyset" } ), 
	snippetCompletion( "epsilon" , { label:"epsilon" } ), 
	snippetCompletion( "=" , { label:"equals" } ), 
	snippetCompletion( "eta" , { label:"eta" } ), 
	snippetCompletion( "floor{#{expression}}" , { label:"floor" } ), 
	snippetCompletion( "frac{#{numerator}}{#{denominator}}" , { label:"fraction" } ), 
	snippetCompletion( "gamma" , { label:"gamma" } ), 
	snippetCompletion( "Gamma" , { label:"Gamma" } ), 
	snippetCompletion( ">" , { label:"greaterthan" } ), 
	snippetCompletion( ">=" , { label:"greaterorequals" } ), 
	snippetCompletion( "hat{#{expression}}" , { label:"hat" } ), 
	snippetCompletion( "oo" , { label:"infinity" } ), 
	snippetCompletion( "int_{#{lowerBound}}^{#{upperBound}}" , { label:"intboth" } ), 
	snippetCompletion( "ZZ" , { label:"integernumberset" } ), 
	snippetCompletion( "int^{#{upperBound}}" , { label:"intover" } ), 
	snippetCompletion( "int_{#{lowerBound}}" , { label:"intunder" } ), 
	snippetCompletion( "iota" , { label:"iota" } ), 
	snippetCompletion( "kappa" , { label:"kappa" } ), 
	snippetCompletion( "lambda" , { label:"lambda" } ), 
	snippetCompletion( "Lambda" , { label:"Lambda" } ), 
	snippetCompletion( "<" , { label:"lessthan" } ), 
	snippetCompletion( "<=" , { label:"lessorequals" } ), 
	snippetCompletion( "lim_{#{limit}}" , { label:"limunder" } ), 
	snippetCompletion( "mu" , { label:"mu" } ), 
	snippetCompletion( "NN" , { label:"naturalnumberset" } ), 
	snippetCompletion( "!=" , { label:"notequal" } ), 
	snippetCompletion( "nu" , { label:"nu" } ), 
	snippetCompletion( "omega" , { label:"omega" } ), 
	snippetCompletion( "Omega" , { label:"Omega" } ), 
	snippetCompletion( "obrace{#{expression}}" , { label:"overbrace" } ), 
	snippetCompletion( "overset{#{sym}}{#{expression}}" , { label:"overset" } ), 
	snippetCompletion( "del" , { label:"partial" } ), 
	snippetCompletion( "phi" , { label:"phi" } ), 
	snippetCompletion( "Phi" , { label:"Phi" } ), 
	snippetCompletion( "pi" , { label:"pi" } ), 
	snippetCompletion( "Pi" , { label:"Pi" } ), 
	snippetCompletion( "^{exponent}" , { label:"power" } ), 
	snippetCompletion( "prod_{#{lowerBound}}^{#{upperBound}}" , { label:"prodboth" } ), 
	snippetCompletion( "prod^{#{upperBound}}" , { label:"prodover" } ), 
	snippetCompletion( "prod_{#{lowerBound}}" , { label:"produnder" } ), 
	snippetCompletion( "psi" , { label:"psi" } ), 
	snippetCompletion( "Psi" , { label:"Psi" } ), 
	snippetCompletion( "QQ" , { label:"rationalnumberset" } ), 
	snippetCompletion( "RR" , { label:"realnumberset" } ), 
	snippetCompletion( "rho" , { label:"rho" } ), 
	snippetCompletion( "sigma" , { label:"sigma" } ), 
	snippetCompletion( "Sigma" , { label:"Sigma" } ), 
	snippetCompletion( "cancel{#{expression}}" , { label:"strikethrough" } ), 
	snippetCompletion( "sum_{#{lowerBound}}^{#{upperBound}}" , { label:"sumboth" } ), 
	snippetCompletion( "sum^{#{upperBound}}" , { label:"sumover" } ), 
	snippetCompletion( "sum_{#{lowerBound}}" , { label:"sumunder" } ), 
	snippetCompletion( "tau" , { label:"tau" } ), 
	snippetCompletion( "text(#{text})" , { label:"text" } ), 
	snippetCompletion( ":." , { label:"therefore" } ), 
	snippetCompletion( "theta" , { label:"theta" } ), 
	snippetCompletion( "Theta" , { label:"Theta" } ), 
	snippetCompletion( "tilde{#{var}}" , { label:"tilde" } ), 
	snippetCompletion( "Ã—" , { label:"times" } ), 
	snippetCompletion( "->" , { label:"towards" } ), 
	snippetCompletion( "ubrace{#{expression}}" , { label:"underbrace" } ), 
	snippetCompletion( "ul{#{expression}}" , { label:"underline" } ), 
	snippetCompletion( "underset{#{sym}}{#{expression}}" , { label:"underset" } ), 
	snippetCompletion( "upsilon" , { label:"upsilon" } ), 
	snippetCompletion( "vec{#{var}}" , { label:"vec" } ), 
	snippetCompletion( "xi" , { label:"xi" } ), 
	snippetCompletion( "Xi" , { label:"Xi" } ), 
	snippetCompletion( "zeta" , { label:"zeta" } ), 
);
/* END AUTOGEN */
